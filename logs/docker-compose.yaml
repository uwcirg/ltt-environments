---
services:
  postgrest:
    extends:
      file: ./logserver/docker-compose.yaml
      service: postgrest
    labels:
      - traefik.enable=true
      - traefik.http.routers.logserver-${COMPOSE_PROJECT_NAME}.rule=Host(`logs.${BASE_DOMAIN}`)
      - traefik.http.routers.logserver-${COMPOSE_PROJECT_NAME}.entrypoints=websecure
      - traefik.http.routers.logserver-${COMPOSE_PROJECT_NAME}.middlewares=oidc-auth-${COMPOSE_PROJECT_NAME}
      - traefik.http.routers.logserver-${COMPOSE_PROJECT_NAME}.tls=true
      - traefik.http.routers.logserver-${COMPOSE_PROJECT_NAME}.tls.certresolver=letsencrypt
    networks:
      internal:
        aliases:
          - postgrest-internal-${COMPOSE_PROJECT_NAME}
      ingress:

  postgres:
    extends:
      file: ./logserver/docker-compose.yaml
      service: postgres
    networks:
      - internal

  auth-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.3.0
    # oauth2-proxy does not EXPOSE (advertise) the ports it listens on in its docker image
    expose:
      - 4180
    # command:
      # POST requests to /events are authenticated by postgrest JWT
      # - --rule.post-events.action=allow
      # - --rule.post-events.rule=PathPrefix(`/events`) && Method(`POST`)
    environment:
      OAUTH2_PROXY_HTTP_ADDRESS: 0.0.0.0:4180
      OAUTH2_PROXY_REVERSE_PROXY: "true"

      # when authenticated, return a static 202 response
      # https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview/#forwardauth-with-static-upstreams-configuration
      OAUTH2_PROXY_UPSTREAMS: static://202

      # needed to set X-Auth-Request-Email
      OAUTH2_PROXY_SET_XAUTHREQUEST: "true"

      # general cookie settings
      OAUTH2_PROXY_COOKIE_SECRET: ${OAUTH2_PROXY_COOKIE_SECRET}
      OAUTH2_PROXY_COOKIE_DOMAINS: .${BASE_DOMAIN}
      OAUTH2_PROXY_WHITELIST_DOMAINS: .${BASE_DOMAIN}
      OAUTH2_PROXY_COOKIE_EXPIRE: 30m
      OAUTH2_PROXY_COOKIE_REFRESH: 1m
      OAUTH2_PROXY_EMAIL_DOMAINS: "*"
      OAUTH2_PROXY_INSECURE_OIDC_ALLOW_UNVERIFIED_EMAIL: "true"
      # TODO test how leaf handles usernames that are not email addresses
      # base session cookie on Keycloak username (email not always set in Keycloak)
      OAUTH2_PROXY_USER_ID_CLAIM: preferred_username

      # OIDC integration settings
      OAUTH2_PROXY_PROVIDER: oidc
      OAUTH2_PROXY_SCOPE: openid profile email
      OAUTH2_PROXY_OIDC_ISSUER_URL: ${OAUTH2_PROXY_OIDC_ISSUER_URL}
      OAUTH2_PROXY_CLIENT_ID: ${OAUTH2_PROXY_CLIENT_ID}
      OAUTH2_PROXY_CLIENT_SECRET: ${OAUTH2_PROXY_CLIENT_SECRET}
    labels:
      - traefik.enable=true
      - traefik.http.routers.auth-proxy-${COMPOSE_PROJECT_NAME}.rule=Host(`auth-proxy.${BASE_DOMAIN}`) || (PathPrefix(`/oauth2`) && Host(`${BASE_DOMAIN}`))

      - traefik.http.routers.auth-proxy-${COMPOSE_PROJECT_NAME}.entrypoints=websecure
      - traefik.http.routers.auth-proxy-${COMPOSE_PROJECT_NAME}.tls.certresolver=letsencrypt

      # https://oauth2-proxy.github.io/oauth2-proxy/configuration/integration/#forwardauth-with-static-upstreams-configuration
      - traefik.http.middlewares.oidc-auth-${COMPOSE_PROJECT_NAME}.forwardAuth.address=http://auth-proxy-${COMPOSE_PROJECT_NAME}:4180/
      - traefik.http.middlewares.oidc-auth-${COMPOSE_PROJECT_NAME}.forwardAuth.trustForwardHeader=true
      - traefik.http.middlewares.oidc-auth-${COMPOSE_PROJECT_NAME}.forwardAuth.authResponseHeaders=X-Auth-Request-User,X-Auth-Request-Email,X-Auth-Request-Access-Token,Authorization

      # TODO dynamically look up from OIDC tokens
      # add Leaf group to all users via HTTP request header; see appsettings.json for available roles
      - traefik.http.middlewares.leaf-groups-${COMPOSE_PROJECT_NAME}.headers.customrequestheaders.gws-groups=leaf_users

    networks:
      ingress:
        aliases:
          - auth-proxy-${COMPOSE_PROJECT_NAME}
      internal:




networks:
  # internal network for backing services
  internal:

  # ingress network
  ingress:
    external: true
    name: external_web
