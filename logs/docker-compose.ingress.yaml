---
services:
  postgrest:
    extends:
      file: ./logserver/docker-compose.yaml
      service: postgrest

    labels:
      - traefik.enable=true
      - traefik.http.routers.logserver-${COMPOSE_PROJECT_NAME}.rule=Host(`logs.${BASE_DOMAIN}`)
      - traefik.http.routers.logserver-${COMPOSE_PROJECT_NAME}.entrypoints=websecure
      - traefik.http.routers.logserver-${COMPOSE_PROJECT_NAME}.tls=true
      - traefik.http.routers.logserver-${COMPOSE_PROJECT_NAME}.tls.certresolver=letsencrypt

      # traefik forwardauth: require that requests are validated (return 200 OK) by oidc-proxy before forwarding to service
      # https://doc.traefik.io/traefik/middlewares/http/forwardauth/
      - traefik.http.routers.logserver-${COMPOSE_PROJECT_NAME}.middlewares=logserver-${COMPOSE_PROJECT_NAME}-forwardauth
      - traefik.http.middlewares.logserver-${COMPOSE_PROJECT_NAME}-forwardauth.forwardauth.address=http://oidc-proxy-${COMPOSE_PROJECT_NAME}:4181
      - traefik.http.middlewares.logserver-${COMPOSE_PROJECT_NAME}-forwardauth.forwardauth.authResponseHeaders=X-Forwarded-User
    networks:
      internal:
        aliases:
          - postgrest-internal-${COMPOSE_PROJECT_NAME}
      ingress:

  postgres:
    extends:
      file: ./logserver/docker-compose.yaml
      service: postgres
    networks:
      - internal

  oidc-proxy:
    # TODO replace with better-maintained oauth2-proxy
    image: thomseddon/traefik-forward-auth:2
    command:
      # POST requests to /events are authenticated by postgrest JWT
      - --rule.post-events.action=allow
      - --rule.post-events.rule=PathPrefix(`/events`) && Method(`POST`)

    environment:
      DEFAULT_PROVIDER: oidc
      PROVIDERS_OIDC_CLIENT_ID: logserver_openid_client
      PROVIDERS_OIDC_CLIENT_SECRET: ${LOGSERVER_CLIENT_SECRET}
      PROVIDERS_OIDC_ISSUER_URL: https://keycloak.${BASE_DOMAIN}/auth/realms/fEMR

      SECRET: ${OIDC_PROXY_SECRET}
    networks:
      ingress:
        aliases:
          - oidc-proxy-${COMPOSE_PROJECT_NAME}
      internal:


  auth-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:v7.3.0
    environment:
      # service settings
      OAUTH2_PROXY_CLIENT_ID: fhir_oauth2_proxy
      OAUTH2_PROXY_HTTP_ADDRESS: 0.0.0.0:4180
      OAUTH2_PROXY_REVERSE_PROXY: "true"
      OAUTH2_PROXY_SET_XAUTHREQUEST: "true"
      OAUTH2_PROXY_SET_AUTHORIZATION_HEADER: "true"
      OAUTH2_PROXY_PASS_AUTHORIZATION_HEADER: "true"
      OAUTH2_PROXY_PASS_USER_HEADERS: "true"
      OAUTH2_PROXY_PASS_ACCESS_TOKEN: "true"
      # allow validation of JWTs in Authorization HTTP header
      # https://medium.com/in-the-weeds/service-to-service-authentication-on-kubernetes-94dcb8216cdc#20d0
      OAUTH2_PROXY_SKIP_JWT_BEARER_TOKENS: "true"

      # when authenticated, return a static 202 response
      # https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview/#forwardauth-with-static-upstreams-configuration
      OAUTH2_PROXY_UPSTREAMS: static://202

      # general cookie settings
      OAUTH2_PROXY_EMAIL_DOMAINS: "*"
      OAUTH2_PROXY_COOKIE_EXPIRE: 30m
      OAUTH2_PROXY_COOKIE_REFRESH: 1m
      OAUTH2_PROXY_INSECURE_OIDC_ALLOW_UNVERIFIED_EMAIL: "true"
      # base session cookie on Keycloak username (email not always set in Keycloak)
      OAUTH2_PROXY_USER_ID_CLAIM: preferred_username

      # OIDC integration settings
      OAUTH2_PROXY_PROVIDER: oidc
      OAUTH2_PROXY_SCOPE: openid profile email
      OAUTH2_PROXY_OIDC_ISSUER_URL: https://keycloak.${BASE_DOMAIN:-localtest.me}/auth/realms/fEMR

      # security settings
      OAUTH2_PROXY_COOKIE_DOMAINS: .${BASE_DOMAIN:-localtest.me}
      OAUTH2_PROXY_WHITELIST_DOMAINS: .${BASE_DOMAIN:-localtest.me}
    # TODO fixup relative path
    env_file:
      - ../../../prod/freestanding/femr/auth-proxy.env
    labels:
      - traefik.enable=true
      # TODO fine-tune to catch any requests coming from this docker-compose project
      - traefik.http.routers.auth-proxy-${COMPOSE_PROJECT_NAME}.rule=Host(`auth-proxy.${BASE_DOMAIN:-localtest.me}`) || (Host(`fhir-auth.${BASE_DOMAIN:-localtest.me}`) && PathPrefix(`/oauth2`))
      - traefik.http.routers.auth-proxy-${COMPOSE_PROJECT_NAME}.entrypoints=websecure
      - traefik.http.routers.auth-proxy-${COMPOSE_PROJECT_NAME}.tls=true
      - traefik.http.routers.auth-proxy-${COMPOSE_PROJECT_NAME}.tls.certresolver=letsencrypt

      # oauth2-proxy does not EXPOSE the ports it listens on, requiring explicit traefik configuration
      - traefik.http.services.auth-proxy-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=4180

      - traefik.http.middlewares.oidc-auth-${COMPOSE_PROJECT_NAME}.forwardAuth.address=http://auth-proxy-${COMPOSE_PROJECT_NAME}:4180/
      - traefik.http.middlewares.oidc-auth-${COMPOSE_PROJECT_NAME}.forwardAuth.trustForwardHeader=true
      - traefik.http.middlewares.oidc-auth-${COMPOSE_PROJECT_NAME}.forwardAuth.authResponseHeaders=X-Auth-Request-User,X-Auth-Request-Email,X-Auth-Request-Access-Token,Authorization
    networks:
      ingress:
        aliases:
          - auth-proxy-${COMPOSE_PROJECT_NAME}
      internal:

  fhir:
    labels:
      - traefik.enable=true
      - traefik.http.routers.fhir-auth-${COMPOSE_PROJECT_NAME}.rule=Host(`fhir-auth.${BASE_DOMAIN:-localtest.me}`)
      - traefik.http.routers.fhir-auth-${COMPOSE_PROJECT_NAME}.middlewares=oidc-auth-${COMPOSE_PROJECT_NAME}
      - traefik.http.routers.fhir-auth-${COMPOSE_PROJECT_NAME}.entrypoints=websecure
      - traefik.http.routers.fhir-auth-${COMPOSE_PROJECT_NAME}.tls=true
      - traefik.http.routers.fhir-auth-${COMPOSE_PROJECT_NAME}.tls.certresolver=letsencrypt



networks:
  # internal network for backing services
  internal:

  # ingress network
  ingress:
    external: true
    name: external_web
