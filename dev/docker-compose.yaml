---
version: "3.7"
services:
  cpro:
    image: ${DOCKER_REPOSITORY-glcr.cirg.uw.edu/svn/dhair2}:${CPRO_IMAGE_TAG:-master}
    environment:
      DATABASE_URL: ${DATABASE_URL:-mysql://mysql:cPR0health@CIRG@mysql:3306/cpro}
      SERVER_NAME: ${BASE_DOMAIN}
      HTTPS: "true"
      INSTANCE_ID: inform
      SHL_MANAGER_URL: https://shl-creator.${BASE_DOMAIN}/share
      OIDC_CLIENT_ID: ltt_cpro
      # Keycloak base URL; TODO discover OIDC config from .well-known/openid-configuration
      OIDC_AUTHZ_SERVER: https://keycloak.${BASE_DOMAIN}/realms/ltt

      OIDC_AUTHORIZATION_ENDPOINT: https://keycloak.${BASE_DOMAIN}/realms/ltt/protocol/openid-connect/auth
      OIDC_TOKEN_ENDPOINT: https://keycloak.${BASE_DOMAIN}/realms/ltt/protocol/openid-connect/token
      OIDC_USERINFO_ENDPOINT: https://keycloak.${BASE_DOMAIN}/realms/ltt/protocol/openid-connect/userinfo
      # TODO set to authenticated endpoint after jwt-proxy added
      FHIR_R4_SERVER_ENDPOINT: http://fhir-internal:8080/fhir/
      # This serves as both a switch to include a second FHIR 'identifier', and as the 'system' to use for it.
      FHIR_R4_EXTERNAL_ID_SYSTEM: https://keycloak.ltt.cirg.uw.edu
    # workaround hardcoded hostname for mysql
    # TODO make mysql hostname configurable
    entrypoint: sh
    command: -c '
       wait-for-it --host=mysql --port=3306 --strict --
       cake initialize_database &&
       cake less generate &&
       apache2-foreground'
    depends_on:
      - mysql
    env_file:
      - cpro.env
    volumes:
      - secure-data:/var/www/html/app/securedata
      - tmp-data:/var/www/html/app/tmp
    labels:
      - traefik.enable=true
      # Traefik will route requests with Host matching the SERVER_NAME environment variable (see .env)
      - traefik.http.routers.cpro-${COMPOSE_PROJECT_NAME}.rule=Host(`${BASE_DOMAIN}`)

      - traefik.http.routers.cpro-${COMPOSE_PROJECT_NAME}.entrypoints=websecure
      - traefik.http.routers.cpro-${COMPOSE_PROJECT_NAME}.tls=true
      - traefik.http.routers.cpro-${COMPOSE_PROJECT_NAME}.tls.certresolver=letsencrypt

      # cPRO does not EXPOSE the ports it listens on, requiring explicit traefik configuration
      # TODO add EXPOSE directive to Dockerfiles
      - traefik.http.services.cpro-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=80
    networks:
      - ingress
      - internal
  mysql:
    image: mariadb:10.6
    environment:
      MYSQL_ROOT_PASSWORD: cPR0health@CIRG
      MYSQL_DATABASE: cpro
      MYSQL_USER: mysql
      MYSQL_PASSWORD: cPR0health@CIRG
    volumes:
      - mysql-data:/var/lib/mysql
    command:
      - mysqld
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --innodb_compression_default=1
      - --sql-mode=
    networks:
      - internal

  db:
    image: postgres:${POSTGRES_IMAGE_TAG:-16}
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
      # mount db creation script in place for bootstrap
      - ./config/db:/docker-entrypoint-initdb.d:ro
    networks:
      - internal
  fhir:
    image: hapiproject/hapi:${FHIR_IMAGE_TAG:-v6.8.3}
    environment:
      spring.datasource.url: jdbc:postgresql://db:5432/hapifhir
      spring.datasource.username: postgres
      spring.datasource.password: postgres
      spring.datasource.driverClassName: org.postgresql.Driver
      spring.jpa.properties.hibernate.dialect: ca.uhn.fhir.jpa.model.dialect.HapiFhirPostgres94Dialect

      hapi.fhir.bulk_export_enabled: "true"
      hapi.fhir.bulk_import_enabled: "true"
      # TODO remove when cascading delete generally available in FHIR REST API
      hapi.fhir.enforce_referential_integrity_on_delete: "false"
      # allow direct assignment of resource IDs in any format
      hapi.fhir.client_id_strategy: ANY

      hapi.fhir.server_address: https://fhir.${BASE_DOMAIN}/fhir/

      SPRING_CONFIG_LOCATION: file:///opt/application.yaml
    volumes:
      - ./config/fhir/application.yaml:/opt/application.yaml:ro
    depends_on:
      - db
    networks:
      internal:
        aliases:
          - fhir-internal
      ingress:
    labels:
      - traefik.enable=true
      - traefik.http.routers.fhir-${COMPOSE_PROJECT_NAME}.rule=Host(`fhir.${BASE_DOMAIN}`)
      - traefik.http.routers.fhir-${COMPOSE_PROJECT_NAME}.entrypoints=websecure
      - traefik.http.routers.fhir-${COMPOSE_PROJECT_NAME}.tls=true
      - traefik.http.routers.fhir-${COMPOSE_PROJECT_NAME}.tls.certresolver=letsencrypt

      # Hapi does not EXPOSE the ports it listens on, requiring explicit traefik configuration
      - traefik.http.services.fhir-${COMPOSE_PROJECT_NAME}.loadbalancer.server.port=8080

  keycloak:
    # use tini as init
    init: true
    image: quay.io/keycloak/keycloak:${KEYCLOAK_IMAGE_TAG:-22.0}
    labels:
      - traefik.enable=true
      - traefik.http.routers.keycloak-${COMPOSE_PROJECT_NAME}.rule=Host(`keycloak.${BASE_DOMAIN}`)
      - traefik.http.routers.keycloak-${COMPOSE_PROJECT_NAME}.entrypoints=websecure
      - traefik.http.routers.keycloak-${COMPOSE_PROJECT_NAME}.tls=true
      - traefik.http.routers.keycloak-${COMPOSE_PROJECT_NAME}.tls.certresolver=letsencrypt
    command:
      # https://www.keycloak.org/server/importExport#_importing_a_realm_during_startup
      # recent Keycloak releases do not allow importing the master realm on startup; use old properties as workaround
      # https://github.com/keycloak/keycloak/issues/12544#issuecomment-1191846726
      - -Dkeycloak.migration.action=import
      - -Dkeycloak.migration.provider=dir
      - -Dkeycloak.migration.dir=/opt/keycloak/data/import
      - -Dkeycloak.migration.strategy=IGNORE_EXISTING
      - -Dkeycloak.migration.replace-placeholders=true
      - start
      - --log-console-output=json
    environment:
      # https://www.keycloak.org/server/all-config
      KC_DB: postgres
      KC_DB_URL_HOST: db
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres

      # https://www.keycloak.org/server/reverseproxy
      KC_PROXY: edge
      # trust traefik Host header validation
      KC_HOSTNAME_STRICT: "false"

      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    env_file:
      - keycloak.env
    volumes:
      - ./config/keycloak/import/:/opt/keycloak/data/import:ro
      - ./config/keycloak/themes/:/opt/keycloak/themes:ro
    depends_on:
      - db
    networks:
      - ingress
      - internal

  fhir-auth:
    image: ghcr.io/uwcirg/jwt-proxy:${PROXY_IMAGE_TAG:-latest}
    env_file:
      fhir-auth.env
    environment:
      UPSTREAM_SERVER: http://fhir-internal:8080
      OIDC_AUTHORIZE_URL: https://keycloak.${BASE_DOMAIN}/realms/ltt/protocol/openid-connect/auth
      OIDC_TOKEN_URI: https://keycloak.${BASE_DOMAIN}/realms/ltt/protocol/openid-connect/token
      OIDC_TOKEN_INTROSPECTION_URI: https://keycloak.${BASE_DOMAIN}/realms/ltt/protocol/openid-connect/token/introspect
      JWKS_URL: https://keycloak.${BASE_DOMAIN}/realms/ltt/protocol/openid-connect/certs
      PATH_WHITELIST: /fhir/metadata,/fhir/.well-known/smart-configuration
    labels:
      - traefik.enable=true
      - traefik.http.routers.fhir-auth-${COMPOSE_PROJECT_NAME}.rule=Host(`fhir-auth.${BASE_DOMAIN}`)
      - traefik.http.routers.fhir-auth-${COMPOSE_PROJECT_NAME}.entrypoints=websecure
      - traefik.http.routers.fhir-auth-${COMPOSE_PROJECT_NAME}.tls=true
      - traefik.http.routers.fhir-auth-${COMPOSE_PROJECT_NAME}.tls.certresolver=letsencrypt

      # TODO review if necessary for shl-creator service in same deploy
      # add CORS middleware, configured to return `Access-Control-Allow-Origin: *`
      # NB accessControlAllowOrigin is deprecated, but not noted in docs
      # https://github.com/traefik/traefik/issues/8796
      - traefik.http.middlewares.fhir-auth-${COMPOSE_PROJECT_NAME}-cors.headers.accessControlAllowOriginList=*
      # allow all verbs used by FHIR REST
      - traefik.http.middlewares.fhir-auth-${COMPOSE_PROJECT_NAME}-cors.headers.accessControlAllowMethods=HEAD,GET,OPTIONS,PATCH,POST,PUT,DELETE
      - traefik.http.middlewares.fhir-auth-${COMPOSE_PROJECT_NAME}-cors.headers.accessControlAllowHeaders=Authorization,Origin,Content-Type,Accept,Cache-Control
      - traefik.http.routers.fhir-auth-${COMPOSE_PROJECT_NAME}.middlewares=fhir-auth-${COMPOSE_PROJECT_NAME}-cors
    depends_on:
      - fhir
    networks:
      - ingress
      - internal

  shl-creator:
    image: ghcr.io/uwcirg/shl-ips:${SHL_CREATOR_IMAGE_TAG:-latest}
    environment:
      SOF_CLIENT_ID: shl_creator
      # Keycloak base URL; discover OIDC config in .well-known/openid-configuration
      SOF_AUTHZ_SERVER: https://keycloak.${BASE_DOMAIN}/realms/ltt
    labels:
      - traefik.enable=true
      - traefik.http.routers.shl-creator-${COMPOSE_PROJECT_NAME}.rule=Host(`shl-creator.${BASE_DOMAIN}`)
      - traefik.http.routers.shl-creator-${COMPOSE_PROJECT_NAME}.entrypoints=websecure
      - traefik.http.routers.shl-creator-${COMPOSE_PROJECT_NAME}.tls=true
      - traefik.http.routers.shl-creator-${COMPOSE_PROJECT_NAME}.tls.certresolver=letsencrypt
    networks:
      - ingress

  shl-server:
    image: ghcr.io/uwcirg/smart.health.links-server:${SHL_SERVER_IMAGE_TAG:-latest}
    labels:
      - traefik.enable=true
      - traefik.http.routers.shl-server-${COMPOSE_PROJECT_NAME}.rule=Host(`shl-server.${BASE_DOMAIN}`)
      - traefik.http.routers.shl-server-${COMPOSE_PROJECT_NAME}.entrypoints=websecure
      - traefik.http.routers.shl-server-${COMPOSE_PROJECT_NAME}.tls=true
      - traefik.http.routers.shl-server-${COMPOSE_PROJECT_NAME}.tls.certresolver=letsencrypt
    networks:
      - ingress

volumes:
  mysql-data: {}
  secure-data: {}
  db-data: {}
  tmp-data: {}
networks:
  # internal network for backing services
  internal:

  # ingress network
  ingress:
    external: true
    name: external_web
